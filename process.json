[{
  "id" : "fzdydc",
  "name" : "COPD_Incid_pm25_breathright_data_prep",
  "description" : null,
  "code" : "import os\nimport pandas as pd\nimport re\n\n# Paths to your data\nozone_data_path = \"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/Ozone and PM2.5 Data/combined_ozone_data.csv\"\nCOPD_incidence_data_path = \"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/IHME_2000-2021_COPD_Incidence_DATA.csv\"\npm25_data_path = \"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/Ozone and PM2.5 Data/combined_pm25_data.csv\"\n\n# Read all the csv into pandas dataframe in memory\nozone_df = pd.read_csv(ozone_data_path, parse_dates=['Date Local'])\nCOPD_incidence_df = pd.read_csv(COPD_incidence_data_path)\npm25_df = pd.read_csv(pm25_data_path)\n\nprint(COPD_incidence_df.columns)\n\n# Convert 'Date Local' to datetime format\npm25_df['Date Local'] = pd.to_datetime(pm25_df['Date Local'], errors='coerce')\n\n# Rename columns to be consistent\n#COPD_incidence_df.rename(columns={'Location': 'County Name'}, inplace=True)\n\n# Use the melt function to transform the DataFrame from wide to long format. This will convert the year-specific columns into rows.\n#COPD_incidence_long = COPD_incidence_df.melt(\n    #id_vars=['County Name', 'FIPS', '% Change in Mortality Rate, 1980-2014'],\n    #var_name='year',\n    #value_name='Mortality'\n#)\n\n# Extract the year from the 'year' column using string operations and convert it to an integer.\n#ILD_long['year'] = ILD_long['year'].str.extract(r'(\\d{4})').astype(int)\n\n# Function to split the Mortality Rate column\ndef split_COPD_Incidence_column_into_three(COPD_Incidence):\n    match = re.match(r'(\\d+\\.\\d+) \\((\\d+\\.\\d+), (\\d+\\.\\d+)\\)', COPD_Incidence)\n    if match:\n        avg, min_val, max_val = match.groups()\n        return pd.Series([float(avg), float(min_val), float(max_val)], index=['COPD_average', 'COPD_min', 'COPD_max'])\n    else:\n        return pd.Series([None, None, None], index=['COPD_average', 'COPD_min', 'COPD_max'])\n\n# Ensure 'COPD Incidence' is a string and handle NaN values\nCOPD_incidence_df['COPD Incidence'] = COPD_incidence_df['COPD Incidence'].astype(str)\n\n\n# Apply the function to split the 'Mortality' column\nCOPD_incidence_df[['COPD_average', 'COPD_min', 'COPD_max']] = COPD_incidence_df['COPD Incidence'].apply(split_COPD_Incidence_column_into_three)\n\n# Drop the original 'Mortality' column if no longer needed\n#COPD_incidence_df = COPD_incidence_df.drop(columns=['COPD In'])\n\nprint(\"COPD_Incidence DataFrame columns:\", COPD_incidence_df.columns)\n\n# Convert the daily ozone into yearly data\npm25_df['year'] = pm25_df['Date Local'].dt.year\n\n# Group by additional columns and 'year'\ngrouped = pm25_df.groupby(['State Name', 'County Name', 'year'])['Arithmetic Mean']\n\n# Compute statistics\nstats_df = grouped.agg(['max', 'min', 'mean', 'median', 'std']).reset_index()\n\n# Rename columns for clarity\nstats_df.columns = ['State Name', 'County Name', 'year', 'Max', 'Min', 'Mean', 'Median', 'Std']\n\n# Convert columns to string in both DataFrames\nstats_df['county'] = stats_df['County Name'].str.lower()\nstats_df['state'] = stats_df['State Name'].str.lower()\nstats_df['year'] = stats_df['year'].astype(int)\n\n#COPD_incidence_df['county'] = COPD_incidence_df['County Name'].str.strip().str.lower()\nCOPD_incidence_df['year'] = COPD_incidence_df['year'].astype(int)\n\n# Print the results\nprint(\"Ozone aggregated yearly data:\", stats_df)\nprint(\"COPD Incidence data header:\", COPD_incidence_df.head())\n\n# Merge the statistics ozone DataFrame with the COPD_long DataFrame\nCOPD_Incid_merged_pm25_df = pd.merge(COPD_incidence_df, stats_df, on=['State Name', 'year'], how='inner')\n\nprint(\"Merged DataFrame:\", COPD_Incid_merged_pm25_df.head())\n\n# Save to a CSV file\nCOPD_Incid_merged_pm25_df.to_csv(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_pm25_merged_df.csv', index=False)\n\n\n\n\n\n\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "f7jhqc",
  "name" : "COPD_Incid_pm25_breathright_correlation",
  "description" : null,
  "code" : "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the CSV file into a DataFrame\nfile_path = '/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_pm25_merged_df.csv'\nCOPD_Incid_merged_pm25_df = pd.read_csv(file_path)\n\nCOPD_Incid_merged_pm25_df = COPD_Incid_merged_pm25_df.drop(columns=['COPD_min', 'COPD_max', 'county', 'County Name'])\n\n\n\n# Display the first few rows of the DataFrame\nprint(COPD_Incid_merged_pm25_df.head())\nprint(COPD_Incid_merged_pm25_df.columns)\n\ndef do_breatheright_correlation_analysis():\n    # Read in the merged CSV file with ozone and lung disease data\n    COPD_Incid_merged_pm25_df = pd.read_csv(f\"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_pm25_merged_df.csv\")\n    print(COPD_Incid_merged_pm25_df.head())\n    print(COPD_Incid_merged_pm25_df.columns)\n\n# Drop the unnecessary columns\n# COPD_merged_pm25_df = COPD_merged_pm25_df.drop(columns=[\"county_x\", 'State Name', 'county_y', 'State Name_y'])\n\n# Figuring out which columns to drop\n# Values in 'county_x' but not in 'county_y'\n#county_x_not_in_county_y = set(ILD_merged_pm25_df['county_x'].dropna()).difference(set(ILD_merged_pm25_df['county_y'].dropna()))\n#print(\"Values in 'county_x' but not in 'county_y':\")\n#print(county_x_not_in_county_y)\n\n# Values in 'county_y' but not in 'county_x'\n#county_y_not_in_county_x = set(ILD_merged_pm25_df['county_y'].dropna()).difference(set(ILD_merged_pm25_df['county_x'].dropna()))\n#print(\"\\nValues in 'county_y' but not in 'county_x':\")\n#print(county_y_not_in_county_x)\n\n# Check for null values\n#print(\"\\nNull values in 'county_x':\")\n#print(ILD_merged_pm25_df['county_x'].isnull().sum())\n\n#print(\"\\nNull values in 'county_y':\")\n#print(ILD_merged_pm25_df['county_y'].isnull().sum())\n\n# Drop the 'county_x' column\n#ILD_merged_pm25_df = ILD_merged_pm25_df.drop(columns=['county_x'])\n\n# Convert state names in 'State Name' to lowercase\nCOPD_Incid_merged_pm25_df['State Name'] = COPD_Incid_merged_pm25_df['State Name'].str.lower()\n\n# Convert state names in 'state' to lowercase\nCOPD_Incid_merged_pm25_df['state'] = COPD_Incid_merged_pm25_df['state'].str.lower()\n\n# Get unique values in 'State Name' and 'state'\nstate_name_values = set(COPD_Incid_merged_pm25_df['State Name'].dropna().unique())\nstate_values = set(COPD_Incid_merged_pm25_df['state'].dropna().unique())\n\n# Find differences\ndiff_state_name_not_in_state = state_name_values - state_values\ndiff_state_not_in_state_name = state_values - state_name_values\n\n# Print the differences\nprint(\"Values in 'State Name' but not in 'state':\")\nprint(diff_state_name_not_in_state)\n\nprint(\"\\nValues in 'state' but not in 'State Name':\")\nprint(diff_state_not_in_state_name)\n\n# Check for null values\nprint(\"\\nNull values in 'State Name':\")\nprint(COPD_Incid_merged_pm25_df['State Name'].isnull().sum())\n\nprint(\"\\nNull values in 'state':\")\nprint(COPD_Incid_merged_pm25_df['state'].isnull().sum())\n\n# Drop the 'state' column\nCOPD_Incid_merged_pm25_df = COPD_Incid_merged_pm25_df.drop(columns=['state'])\n\n# Renaming columns for clarity\nCOPD_Incid_merged_pm25_df = COPD_Incid_merged_pm25_df.rename(columns={\n    'Max': 'pm25_max',\n    'Min': 'pm25_min',\n    'Mean': 'pm25_mean',\n    'Median': 'pm25_median',\n    'Std': 'pm25_std',\n})\n\n# Calculate correlations\ncorrelation_matrix = COPD_Incid_merged_pm25_df[[\n    'COPD_average', 'lower', 'upper',\n    'pm25_max', 'pm25_min', 'pm25_mean', 'pm25_median', 'pm25_std'\n]].corr()\n\n# Save correlation matrix to CSV\ncorrelation_matrix.to_csv(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_pm25_correlation_matrix.csv')\n\n# Plot Correlation Heatmap\nplt.figure(figsize=(12, 13))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)\nplt.title('COPD Incidence vs. PM2.5 Correlation Heatmap')\nplt.savefig(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_correlation_heatmap_pm25.png')\n# plt.show()\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "kw5zqo",
  "name" : "COPD_Incid_ozone_breathright_data_prep",
  "description" : null,
  "code" : "import os\nimport pandas as pd\nimport re\n\n# Paths to your data\nozone_data_path = \"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/Ozone and PM2.5 Data/combined_ozone_data.csv\"\nCOPD_incidence_data_path = \"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/IHME_2000-2021_COPD_Incidence_DATA.csv\"\npm25_data_path = \"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/Ozone and PM2.5 Data/combined_pm25_data.csv\"\n\n# Read all the csv into pandas dataframe in memory\nozone_df = pd.read_csv(ozone_data_path, parse_dates=['Date Local'])\nCOPD_incidence_df = pd.read_csv(COPD_incidence_data_path)\npm25_df = pd.read_csv(pm25_data_path)\n\nprint(COPD_incidence_df.columns)\n\n# Convert 'Date Local' to datetime format\nozone_df['Date Local'] = pd.to_datetime(ozone_df['Date Local'], errors='coerce')\n\n# Rename columns to be consistent\n#COPD_incidence_df.rename(columns={'Location': 'County Name'}, inplace=True)\n\n# Use the melt function to transform the DataFrame from wide to long format. This will convert the year-specific columns into rows.\n#COPD_incidence_long = COPD_incidence_df.melt(\n    #id_vars=['County Name', 'FIPS', '% Change in Mortality Rate, 1980-2014'],\n    #var_name='year',\n    #value_name='Mortality'\n#)\n\n# Extract the year from the 'year' column using string operations and convert it to an integer.\n#ILD_long['year'] = ILD_long['year'].str.extract(r'(\\d{4})').astype(int)\n\n# Function to split the Mortality Rate column\ndef split_COPD_Incidence_column_into_three(COPD_Incidence):\n    match = re.match(r'(\\d+\\.\\d+) \\((\\d+\\.\\d+), (\\d+\\.\\d+)\\)', COPD_Incidence)\n    if match:\n        avg, min_val, max_val = match.groups()\n        return pd.Series([float(avg), float(min_val), float(max_val)], index=['COPD_average', 'COPD_min', 'COPD_max'])\n    else:\n        return pd.Series([None, None, None], index=['COPD_average', 'COPD_min', 'COPD_max'])\n\n# Ensure 'COPD Incidence' is a string and handle NaN values\nCOPD_incidence_df['COPD Incidence'] = COPD_incidence_df['COPD Incidence'].astype(str)\n\n\n# Apply the function to split the 'Mortality' column\nCOPD_incidence_df[['COPD_average', 'COPD_min', 'COPD_max']] = COPD_incidence_df['COPD Incidence'].apply(split_COPD_Incidence_column_into_three)\n\n# Drop the original 'Mortality' column if no longer needed\n#COPD_incidence_df = COPD_incidence_df.drop(columns=['COPD In'])\n\nprint(\"COPD_Incidence DataFrame columns:\", COPD_incidence_df.columns)\n\n# Convert the daily ozone into yearly data\nozone_df['year'] = ozone_df['Date Local'].dt.year\n\n# Group by additional columns and 'year'\ngrouped = ozone_df.groupby(['State Name', 'County Name', 'year'])['Arithmetic Mean']\n\n# Compute statistics\nstats_df = grouped.agg(['max', 'min', 'mean', 'median', 'std']).reset_index()\n\n# Rename columns for clarity\nstats_df.columns = ['State Name', 'County Name', 'year', 'Max', 'Min', 'Mean', 'Median', 'Std']\n\n# Convert columns to string in both DataFrames\nstats_df['county'] = stats_df['County Name'].str.lower()\nstats_df['state'] = stats_df['State Name'].str.lower()\nstats_df['year'] = stats_df['year'].astype(int)\n\n#COPD_incidence_df['county'] = COPD_incidence_df['County Name'].str.strip().str.lower()\nCOPD_incidence_df['year'] = COPD_incidence_df['year'].astype(int)\n\n# Print the results\nprint(\"Ozone aggregated yearly data:\", stats_df)\nprint(\"COPD Incidence data header:\", COPD_incidence_df.head())\n\n# Merge the statistics ozone DataFrame with the COPD_long DataFrame\nCOPD_Incid_merged_ozone_df = pd.merge(COPD_incidence_df, stats_df, on=['State Name', 'year'], how='inner')\n\nprint(\"Merged DataFrame:\", COPD_Incid_merged_ozone_df.head())\n\n# Save to a CSV file\nCOPD_Incid_merged_ozone_df.to_csv(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_ozone_merged_df.csv', index=False)\n\n\n\n\n\n\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "ddcab9",
  "name" : "COPD_Incid_ozone_breathright_correlation",
  "description" : null,
  "code" : "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the CSV file into a DataFrame\nfile_path = '/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_ozone_merged_df.csv'\nCOPD_Incid_merged_ozone_df = pd.read_csv(file_path)\n\nCOPD_Incid_merged_ozone_df = COPD_Incid_merged_ozone_df.drop(columns=['COPD_min', 'COPD_max', 'county', 'County Name'])\n\n\n\n# Display the first few rows of the DataFrame\nprint(COPD_Incid_merged_ozone_df.head())\nprint(COPD_Incid_merged_ozone_df.columns)\n\ndef do_breatheright_correlation_analysis():\n    # Read in the merged CSV file with ozone and lung disease data\n    COPD_Incid_merged_ozone_df = pd.read_csv(f\"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_ozone_merged_df.csv\")\n    print(COPD_Incid_merged_ozone_df.head())\n    print(COPD_Incid_merged_ozone_df.columns)\n\n# Drop the unnecessary columns\n# COPD_merged_pm25_df = COPD_merged_pm25_df.drop(columns=[\"county_x\", 'State Name', 'county_y', 'State Name_y'])\n\n# Figuring out which columns to drop\n# Values in 'county_x' but not in 'county_y'\n#county_x_not_in_county_y = set(ILD_merged_pm25_df['county_x'].dropna()).difference(set(ILD_merged_pm25_df['county_y'].dropna()))\n#print(\"Values in 'county_x' but not in 'county_y':\")\n#print(county_x_not_in_county_y)\n\n# Values in 'county_y' but not in 'county_x'\n#county_y_not_in_county_x = set(ILD_merged_pm25_df['county_y'].dropna()).difference(set(ILD_merged_pm25_df['county_x'].dropna()))\n#print(\"\\nValues in 'county_y' but not in 'county_x':\")\n#print(county_y_not_in_county_x)\n\n# Check for null values\n#print(\"\\nNull values in 'county_x':\")\n#print(ILD_merged_pm25_df['county_x'].isnull().sum())\n\n#print(\"\\nNull values in 'county_y':\")\n#print(ILD_merged_pm25_df['county_y'].isnull().sum())\n\n# Drop the 'county_x' column\n#ILD_merged_pm25_df = ILD_merged_pm25_df.drop(columns=['county_x'])\n\n# Convert state names in 'State Name' to lowercase\nCOPD_Incid_merged_ozone_df['State Name'] = COPD_Incid_merged_ozone_df['State Name'].str.lower()\n\n# Convert state names in 'state' to lowercase\nCOPD_Incid_merged_ozone_df['state'] = COPD_Incid_merged_ozone_df['state'].str.lower()\n\n# Get unique values in 'State Name' and 'state'\nstate_name_values = set(COPD_Incid_merged_ozone_df['State Name'].dropna().unique())\nstate_values = set(COPD_Incid_merged_ozone_df['state'].dropna().unique())\n\n# Find differences\ndiff_state_name_not_in_state = state_name_values - state_values\ndiff_state_not_in_state_name = state_values - state_name_values\n\n# Print the differences\nprint(\"Values in 'State Name' but not in 'state':\")\nprint(diff_state_name_not_in_state)\n\nprint(\"\\nValues in 'state' but not in 'State Name':\")\nprint(diff_state_not_in_state_name)\n\n# Check for null values\nprint(\"\\nNull values in 'State Name':\")\nprint(COPD_Incid_merged_ozone_df['State Name'].isnull().sum())\n\nprint(\"\\nNull values in 'state':\")\nprint(COPD_Incid_merged_ozone_df['state'].isnull().sum())\n\n# Drop the 'state' column\nCOPD_Incid_merged_ozone_df = COPD_Incid_merged_ozone_df.drop(columns=['state'])\n\n# Renaming columns for clarity\nCOPD_Incid_merged_ozone_df = COPD_Incid_merged_ozone_df.rename(columns={\n    'Max': 'ozone_max',\n    'Min': 'ozone_min',\n    'Mean': 'ozone_mean',\n    'Median': 'ozone_median',\n    'Std': 'ozone_std',\n})\n\n# Calculate correlations\ncorrelation_matrix = COPD_Incid_merged_ozone_df[[\n    'COPD_average', 'lower', 'upper',\n    'ozone_max', 'ozone_min', 'ozone_mean', 'ozone_median', 'ozone_std'\n]].corr()\n\n# Save correlation matrix to CSV\ncorrelation_matrix.to_csv(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_ozone_correlation_matrix.csv')\n\n# Plot Correlation Heatmap\nplt.figure(figsize=(12, 13))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)\nplt.title('COPD Incidence vs. Ozone Correlation Heatmap')\nplt.savefig(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/COPD_Incid_correlation_heatmap_ozone.png')\n# plt.show()\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
}]
